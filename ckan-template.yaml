    ##comienzo Template
  apiVersion: v1
  kind: Template
  metadata:
    name: ckan-openshift-mvilche
    labels:
      template: ckan-openshift-mvilche
      autor: "Martin_Fabrizzio_Vilche"
    annotations:
      openshift.io/display-name: "ckan-openshift-mvilche"
      iconClass: "icon-github"
      description: >-
        CKAN 2.8.2 INTEGRACION OPENSHIFT
        Martin Fabrizzio Vilche.
        https://github.com/mvilche.

  objects:







########## CKAN
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "ckan"
      name: "ckan"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: ckan
        deploymentconfig: ckan
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ckan
            deploymentconfig: ckan
        spec:
          containers:
            - env:
                - name: POSTGRES_HOST
                  value: postgresql
                - name: POSTGRES_PORT
                  value: '5432'
                - name: POSTGRES_USER
                  value: ckan
                - name: POSTGRES_PASSWORD
                  value: ckan
                - name: TIMEZONE
                  value: America/Montevideo
                - name: CKAN_URL
                  value: ${DOMINIO}
                - name: CKAN_REDIS_URL
                  value: redis://redis:6379/0
                - name: CKAN_SOLR_URL
                  value: http://solr:8983/solr/ckan
                - name: CKAN_DATAPUSHER_URL
                  value: http://datapusher:8800
              image: "ckan:latest"
              imagePullPolicy: Always
              name: ckan
              ports:
                - containerPort: 5000
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 5000
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 5000
                  path: /
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 1
                  memory: 1Gi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/src/ckan/config
                  name: ckan-data-1
                  subPath: ckan
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ckan-data-1
              persistentVolumeClaim:
                claimName: ckan-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - ckan
            from:
              kind: ImageStreamTag
              name: "ckan:2.8.2"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ckan
        build: ckan
      name: ckan
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'ckan:2.8.2'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: ckan
        git:
          ref: master
          uri: 'https://github.com/mvilche/ckan-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ckan
      name: ckan
    spec:
      ports:
        - name: http
          port: 5000
          protocol: TCP
          targetPort: 5000
      selector:
        app: ckan
        deploymentconfig: ckan
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ckan
      name: ckan-http
    spec:
      port:
        targetPort: http
      host: ${DOMINIO}
      to:
        kind: Service
        name: ckan
        weight: 100
      wildcardPolicy: None


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ckan
      name: ckan
    spec: {}


########## FIN CKAN

########## datapusher
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "datapusher"
      name: "datapusher"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: datapusher
        deploymentconfig: datapusher
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: datapusher
            deploymentconfig: datapusher
        spec:
          containers:
            - image: "datapusher:latest"
              imagePullPolicy: Always
              name: datapusher
              ports:
                - containerPort: 8800
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8800
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8800
                  path: /
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 500m
                  memory: 128Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - datapusher
            from:
              kind: ImageStreamTag
              name: "datapusher:latest"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: datapusher
        build: datapusher
      name: datapusher
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'datapusher:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: pusher
        git:
          ref: master
          uri: 'https://github.com/mvilche/ckan-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: datapusher
      name: datapusher
    spec:
      ports:
        - name: http
          port: 8800
          protocol: TCP
          targetPort: 8800
      selector:
        app: datapusher
        deploymentconfig: datapusher
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: datapusher
      name: datapusher
    spec: {}

########## FIN datapusher

### COMIENZO postgresql
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: postgresql
      name: postgresql
    spec:
      replicas: 1
      selector:
        app: postgresql
        deploymentconfig: postgresql
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: postgresql
            deploymentconfig: postgresql
        spec:
          containers:
            - env:
                - name: POSTGRESQL_USER
                  value: ckan
                - name: POSTGRESQL_PASSWORD
                  value: ckan
                - name: POSTGRESQL_DATABASE
                  value: ckan
              image: postgresql:10
              imagePullPolicy: Always
              name: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                  - /bin/sh
                  - -i
                  - -c
                  - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  memory: 256Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: postgresql-1
                  subPath: postgresql
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: postgresql-1
              persistentVolumeClaim:
                claimName: ckan-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: 'postgresql:10'
          type: ImageChange



  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: postgresql
      name: postgresql
    spec:
      ports:
        - name: tcp
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        app: postgresql
        deploymentconfig: postgresql
      sessionAffinity: None
      type: ClusterIP



  - apiVersion: v1
    kind: ImageStream
    metadata:
        name: postgresql
    spec:
        tags:
          - name: '10'
            from:
                kind: DockerImage
                name: centos/postgresql-10-centos7:latest


###### FIN postgresql


########## redis
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "redis"
      name: "redis"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: redis
        deploymentconfig: redis
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: redis
            deploymentconfig: redis
        spec:
          containers:
            - image: "redis:5.0.5"
              imagePullPolicy: Always
              name: redis
              ports:
                - containerPort: 6379
                  protocol: TCP
              resources:
                limits:
                  cpu: 500m
                  memory: 128Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - redis
            from:
              kind: ImageStreamTag
              name: "redis:5.0.5"
          type: ImageChange



  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: redis
      name: redis
    spec:
      ports:
        - name: http
          port: 6379
          protocol: TCP
          targetPort: 6379
      selector:
        app: redis
        deploymentconfig: redis
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: ImageStream
    metadata:
        name: redis
    spec:
        tags:
          - name: 5.0.5
            from:
                kind: DockerImage
                name: redis:5.0.5

########## FIN redis


########## solr
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "solr"
      name: "solr"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: solr
        deploymentconfig: solr
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: solr
            deploymentconfig: solr
        spec:
          containers:
            - env:
                - name: SOLR_JAVA_MEM
                  value: "-Dfile.encoding=UTF8 -XX:MaxRAMFraction=1 -XX:+ExitOnOutOfMemoryError -XX:+UnlockExperimentalVMOptions -Djava.net.preferIPv4Stack=true"
              image: "solr:6.6.5"
              imagePullPolicy: Always
              name: solr
              ports:
                - containerPort: 8983
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8983
                  path: /solr
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8983
                  path: /solr
                timeoutSeconds: 15
              resources:
                limits:
                  memory: 800Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/solr/server/solr/ckan/index
                  name: solr-1
                  subPath: solr
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - name: solr-1
              persistentVolumeClaim:
                claimName: ckan-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - solr
            from:
              kind: ImageStreamTag
              name: "solr:6.6.5"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: solr
        build: solr
      name: solr
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'solr:6.6.5'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: solr
        git:
          ref: master
          uri: 'https://github.com/mvilche/ckan-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: solr
      name: solr
    spec:
      ports:
        - name: http
          port: 8983
          protocol: TCP
          targetPort: 8983
      selector:
        app: solr
        deploymentconfig: solr
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: solr
      name: solr
    spec: {}

########## FIN solr

#######################
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
      - kubernetes.io/pvc-protection
      name: ckan-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi

########################3




################PARAMETROS
  parameters:
    - name: DOMINIO
      displayName: Nombre del dominio publico de acceso a ckan
      value: ''
      required: true

###############
