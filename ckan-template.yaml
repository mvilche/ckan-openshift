    ##comienzo Template
  apiVersion: v1
  kind: Template
  metadata:
    name: ckan-openshift-mvilche
    labels:
      template: ckan-openshift-mvilche
      autor: "Martin_Fabrizzio_Vilche"
    annotations:
      openshift.io/display-name: "ckan-openshift-mvilche"
      iconClass: "icon-github"
      description: >-
        CKAN 2.8.2 INTEGRACION OPENSHIFT
        Martin Fabrizzio Vilche.
        https://github.com/mvilche.

  objects:







########## CKAN
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "ckan"
      name: "ckan"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: ckan
        deploymentconfig: ckan
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ckan
            deploymentconfig: ckan
        spec:
          containers:
            - env:
                - name: POSTGRES_HOST
                  value: postgresql
                - name: POSTGRES_PORT
                  value: '5432'
                - name: POSTGRES_USER
                  value: ckan
                - name: POSTGRES_PASSWORD
                  value: ckan
                - name: TIMEZONE
                  value: America/Montevideo
                - name: CKAN_URL
                  value: ${DOMINIO}
                - name: CKAN_REDIS_URL
                  value: redis://redis:6379/0
                - name: CKAN_SOLR_URL
                  value: http://solr:8983/solr/ckan
                - name: CKAN_DATAPUSHER_URL
                  value: http://datapusher:8800
              image: "ckan:latest"
              imagePullPolicy: Always
              name: ckan
              ports:
                - containerPort: 5000
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 5000
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 5000
                  path: /
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 1
                  memory: 1Gi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/src/ckan/config
                  name: ckan-data-1
                  subPath: ckan/config
                - mountPath: /opt/src/ckan/config
                  name: ckan-data-1
                  subPath: ckan/cdata
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ckan-data-1
              persistentVolumeClaim:
                claimName: ckan-data
            - configMap:
                defaultMode: 420
                items:
                  - key: production.ini
                    path: production.ini
                  - key: who.ini
                    path: who.ini
                name: ckan-configfiles
              name: ckan-config
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - ckan
            from:
              kind: ImageStreamTag
              name: "ckan:2.8.2"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ckan
        build: ckan
      name: ckan
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'ckan:2.8.2'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: ckan
        git:
          ref: master
          uri: 'https://github.com/mvilche/ckan-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ckan
      name: ckan
    spec:
      ports:
        - name: http
          port: 5000
          protocol: TCP
          targetPort: 5000
      selector:
        app: ckan
        deploymentconfig: ckan
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ckan
      name: ckan-http
    spec:
      port:
        targetPort: http
      host: ${DOMINIO}
      to:
        kind: Service
        name: ckan
        weight: 100
      wildcardPolicy: None


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ckan
      name: ckan
    spec: {}


########## FIN CKAN

########## datapusher
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "datapusher"
      name: "datapusher"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: datapusher
        deploymentconfig: datapusher
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: datapusher
            deploymentconfig: datapusher
        spec:
          containers:
            - image: "datapusher:latest"
              imagePullPolicy: Always
              name: datapusher
              ports:
                - containerPort: 8800
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8800
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8800
                  path: /
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 500m
                  memory: 128Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - datapusher
            from:
              kind: ImageStreamTag
              name: "datapusher:latest"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: datapusher
        build: datapusher
      name: datapusher
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'datapusher:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: pusher
        git:
          ref: master
          uri: 'https://github.com/mvilche/ckan-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: datapusher
      name: datapusher
    spec:
      ports:
        - name: http
          port: 8800
          protocol: TCP
          targetPort: 8800
      selector:
        app: datapusher
        deploymentconfig: datapusher
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: datapusher
      name: datapusher
    spec: {}

########## FIN datapusher

### COMIENZO postgresql
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: postgresql
      name: postgresql
    spec:
      replicas: 1
      selector:
        app: postgresql
        deploymentconfig: postgresql
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: postgresql
            deploymentconfig: postgresql
        spec:
          containers:
            - env:
                - name: POSTGRESQL_USER
                  value: ckan
                - name: POSTGRESQL_PASSWORD
                  value: ckan
                - name: POSTGRESQL_DATABASE
                  value: ckan
              image: postgresql:10
              imagePullPolicy: Always
              name: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                  - /bin/sh
                  - -i
                  - -c
                  - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  memory: 256Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: postgresql-1
                  subPath: postgresql
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: postgresql-1
              persistentVolumeClaim:
                claimName: ckan-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: 'postgresql:10'
          type: ImageChange



  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: postgresql
      name: postgresql
    spec:
      ports:
        - name: tcp
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        app: postgresql
        deploymentconfig: postgresql
      sessionAffinity: None
      type: ClusterIP



  - apiVersion: v1
    kind: ImageStream
    metadata:
        name: postgresql
    spec:
        tags:
          - name: '10'
            from:
                kind: DockerImage
                name: centos/postgresql-10-centos7:latest


###### FIN postgresql


########## redis
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "redis"
      name: "redis"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: redis
        deploymentconfig: redis
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: redis
            deploymentconfig: redis
        spec:
          containers:
            - image: "redis:5.0.5"
              imagePullPolicy: Always
              name: redis
              ports:
                - containerPort: 6379
                  protocol: TCP
              resources:
                limits:
                  cpu: 500m
                  memory: 128Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - redis
            from:
              kind: ImageStreamTag
              name: "redis:5.0.5"
          type: ImageChange



  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: redis
      name: redis
    spec:
      ports:
        - name: http
          port: 6379
          protocol: TCP
          targetPort: 6379
      selector:
        app: redis
        deploymentconfig: redis
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: ImageStream
    metadata:
        name: redis
    spec:
        tags:
          - name: 5.0.5
            from:
                kind: DockerImage
                name: redis:5.0.5

########## FIN redis


########## solr
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "solr"
      name: "solr"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: solr
        deploymentconfig: solr
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: solr
            deploymentconfig: solr
        spec:
          containers:
            - env:
                - name: SOLR_JAVA_MEM
                  value: "-Dfile.encoding=UTF8 -XX:MaxRAMFraction=1 -XX:+ExitOnOutOfMemoryError -XX:+UnlockExperimentalVMOptions -Djava.net.preferIPv4Stack=true"
              image: "solr:6.6.5"
              imagePullPolicy: Always
              name: solr
              ports:
                - containerPort: 8983
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8983
                  path: /solr
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8983
                  path: /solr
                timeoutSeconds: 15
              resources:
                limits:
                  memory: 800Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/solr/server/solr/ckan/index
                  name: solr-1
                  subPath: solr
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - name: solr-1
              persistentVolumeClaim:
                claimName: ckan-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - solr
            from:
              kind: ImageStreamTag
              name: "solr:6.6.5"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: solr
        build: solr
      name: solr
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'solr:6.6.5'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: solr
        git:
          ref: master
          uri: 'https://github.com/mvilche/ckan-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: solr
      name: solr
    spec:
      ports:
        - name: http
          port: 8983
          protocol: TCP
          targetPort: 8983
      selector:
        app: solr
        deploymentconfig: solr
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: solr
      name: solr
    spec: {}

########## FIN solr

#######################
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
      - kubernetes.io/pvc-protection
      name: ckan-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi

########################



###########################

  - apiVersion: v1
    data:
      production.ini: "#\n# CKAN - Pylons configuration\n#\n# These are some of the configuration options available for your CKAN\n# instance. Check the documentation in 'doc/configuration.rst' or at the\n# following URL for a description of what they do and the full list of\n# available options:\n#\n# http://docs.ckan.org/en/latest/maintaining/configuration.html\n#\n# The %(here)s variable will be replaced with the parent directory of this file\n#\n\n[DEFAULT]\n\n# WARNING: *THIS SETTING MUST BE SET TO FALSE ON A PUBLIC ENVIRONMENT*\n# With debug mode enabled, a visitor to your site could execute malicious commands.\ndebug = false\n\n[server:main]\nuse = egg:Paste#http\nhost = 0.0.0.0\nport = 5000\n\n[app:main]\nuse = egg:ckan\nfull_stack = true\ncache_dir = /tmp/%(ckan.site_id)s/\nbeaker.session.key = ckan\n\n# This is the secret token that the beaker library uses to hash the cookie sent\n# to the client. `paster make-config` generates a unique value for this each\n# time it generates a config file.\nbeaker.session.secret = jw6jYeUMrEynFlRtn8VQZqKAn\n\n# `paster make-config` generates a unique value for this each time it generates\n# a config file.\napp_instance_uuid = 17d02640-f096-468a-8642-0b7e6e7dab49\n\n# repoze.who config\nwho.config_file = %(here)s/who.ini\nwho.log_level = warning\nwho.log_file = %(cache_dir)s/who_log.ini\n# Session timeout (user logged out after period of inactivity, in seconds).\n# Inactive by default, so the session doesn't expire.\n# who.timeout = 86400\n\n## Database Settings\nsqlalchemy.url = postgresql://ckan:ckan@postgresql/ckan\n\n#ckan.datastore.write_url = postgresql://ckan_default:pass@localhost/datastore_default\n#ckan.datastore.read_url = postgresql://datastore_default:pass@localhost/datastore_default\n\n# PostgreSQL' full-text search parameters\nckan.datastore.default_fts_lang = english\nckan.datastore.default_fts_index_method = gist\n\n\n## Site Settings\n\nckan.site_url=http://ckan-http-ckan.127.0.0.1.nip.io\n#ckan.use_pylons_response_cleanup_middleware = true\n\n## Authorization Settings\n\nckan.auth.anon_create_dataset = false\nckan.auth.create_unowned_dataset = false\nckan.auth.create_dataset_if_not_in_organization = false\nckan.auth.user_create_groups = false\nckan.auth.user_create_organizations = false\nckan.auth.user_delete_groups = true\nckan.auth.user_delete_organizations = true\nckan.auth.create_user_via_api = false\nckan.auth.create_user_via_web = true\nckan.auth.roles_that_cascade_to_sub_groups = admin\nckan.auth.public_user_details = true\nckan.auth.public_activity_stream_detail = true\n\n\n## Search Settings\n\nckan.site_id = default\nsolr_url=http://solr:8983/solr/ckan\n\n\n## Redis Settings\n\n# URL to your Redis instance, including the database to be used.\nckan.redis.url=redis://redis:6379/0\n\n\n## CORS Settings\n\n# If cors.origin_allow_all is true, all origins are allowed.\n# If false, the cors.origin_whitelist is used.\n# ckan.cors.origin_allow_all = true\n# cors.origin_whitelist is a space separated list of allowed domains.\n# ckan.cors.origin_whitelist = http://example1.com http://example2.com\n\n\n## Plugins Settings\n\n# Note: Add ``datastore`` to enable the CKAN DataStore\n#       Add ``datapusher`` to enable DataPusher\n#\t\tAdd ``resource_proxy`` to enable resorce proxying and get around the\n#\t\tsame origin policy\nckan.plugins = stats text_view image_view recline_view\n\n# Define which views should be created by default\n# (plugins must be loaded in ckan.plugins)\nckan.views.default_views = image_view text_view recline_view\n\n# Customize which text formats the text_view plugin will show\n#ckan.preview.json_formats = json\n#ckan.preview.xml_formats = xml rdf rdf+xml owl+xml atom rss\n#ckan.preview.text_formats = text plain text/plain\n\n# Customize which image formats the image_view plugin will show\n#ckan.preview.image_formats = png jpeg jpg gif\n\n## Front-End Settings\n\nckan.site_title = CKAN\nckan.site_logo = /base/images/ckan-logo.png\nckan.site_description =\nckan.favicon = /base/images/ckan.ico\nckan.gravatar_default = identicon\nckan.preview.direct = png jpg gif\nckan.preview.loadable = html htm rdf+xml owl+xml xml n3 n-triples turtle plain atom csv tsv rss txt json\nckan.display_timezone = server\n\n# package_hide_extras = for_search_index_only\n#package_edit_return_url = http://another.frontend/dataset/<NAME>\n#package_new_return_url = http://another.frontend/dataset/<NAME>\n#ckan.recaptcha.publickey =\n#ckan.recaptcha.privatekey =\n#licenses_group_url = http://licenses.opendefinition.org/licenses/groups/ckan.json\n# ckan.template_footer_end =\n\n\n## Internationalisation Settings\nckan.locale_default = en\nckan.locale_order = en pt_BR ja it cs_CZ ca es fr el sv sr sr@latin no sk fi ru de pl nl bg ko_KR hu sa sl lv\nckan.locales_offered =\nckan.locales_filtered_out = en_GB\n\n## Feeds Settings\n\nckan.feeds.authority_name =\nckan.feeds.date =\nckan.feeds.author_name =\nckan.feeds.author_link =\n\n## Storage Settings\n\nckan.storage_path=/opt/src/ckan/data\n#ckan.max_resource_size = 10\n#ckan.max_image_size = 2\n\n## Webassets Settings\n#ckan.webassets.use_x_sendfile = false\n#ckan.webassets.path = /var/lib/ckan/webassets\n\n\n## Datapusher settings\n\n# Make sure you have set up the DataStore\n\n#ckan.datapusher.formats = csv xls xlsx tsv application/csv application/vnd.ms-excel application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\nckan.datapusher.url=http://datapusher:8800\n#ckan.datapusher.assume_task_stale_after = 3600\n\n# Resource Proxy settings\n# Preview size limit, default: 1MB\n#ckan.resource_proxy.max_file_size = 1048576\n# Size of chunks to read/write.\n#ckan.resource_proxy.chunk_size = 4096\n\n## Activity Streams Settings\n\n#ckan.activity_streams_enabled = true\n#ckan.activity_list_limit = 31\n#ckan.activity_streams_email_notifications = true\n#ckan.email_notifications_since = 2 days\nckan.hide_activity_from_users = %(ckan.site_id)s\n\n\n## Email settings\n\n#email_to = errors@example.com\n#error_email_from = ckan-errors@example.com\n#smtp.server = localhost\n#smtp.starttls = False\n#smtp.user = username@example.com\n#smtp.password = your_password\n#smtp.mail_from =\n\n## Background Job Settings\nckan.jobs.timeout = 180\n\n## Logging configuration\n[loggers]\nkeys = root, ckan, ckanext\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARNING\nhandlers = console\n\n[logger_ckan]\nlevel = INFO\nhandlers = console\nqualname = ckan\npropagate = 0\n\n[logger_ckanext]\nlevel = DEBUG\nhandlers = console\nqualname = ckanext\npropagate = 0\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s"
      who.ini: |-
        [plugin:auth_tkt]
        use = ckan.lib.repoze_plugins.auth_tkt:make_plugin
        # If no secret key is defined here, beaker.session.secret will be used
        #secret = somesecret

        [plugin:friendlyform]
        use = ckan.lib.repoze_plugins.friendly_form:FriendlyFormPlugin
        login_form_url= /user/login
        login_handler_path = /login_generic
        logout_handler_path = /user/logout
        rememberer_name = auth_tkt
        post_login_url = /user/logged_in
        post_logout_url = /user/logged_out
        charset = utf-8

        [general]
        request_classifier = repoze.who.classifiers:default_request_classifier
        challenge_decider = repoze.who.classifiers:default_challenge_decider

        [identifiers]
        plugins =
            friendlyform;browser
            auth_tkt

        [authenticators]
        plugins =
            auth_tkt
            ckan.lib.authenticator:UsernamePasswordAuthenticator

        [challengers]
        plugins =
            friendlyform;browser
    kind: ConfigMap
    metadata:
      name: ckan-configfiles



###########################




################PARAMETROS
  parameters:
    - name: DOMINIO
      displayName: Nombre del dominio publico de acceso a ckan
      value: ''
      required: true

###############
